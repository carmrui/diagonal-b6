syntax = "proto3";

package api;

import "geometry.proto";
import "features.proto";

option go_package = "diagonal.works/diagonal/proto";

message TypeProto {
    enum Kind {
        KindInvalid = 0;

        KindPattern = 1;
        KindAny = 2;
        KindTraits = 3;
        KindPair = 4;
        KindCollection = 5;
        KindFunction = 6;

        KindBool = 7;
        KindInt = 8;
        KindFloat = 9;
        KindString = 10;
        KindQuery = 11;
        KindPoint = 12;
        KindPath = 13;
        KindArea = 14;
        KindFeatureID = 15;
        KindPointFeature = 16;
        KindPathFeature = 17;
        KindAreaFeature = 18;
        KindRelationFeature = 19;
        KindTraversal = 20;
        KindGeoJSON = 21;
    }
    Kind kind = 1;
    repeated TypeProto args = 2;
}

message CollectionProto {
    TypeProto keyType = 1;
    repeated LiteralNodeProto keys = 2;

    TypeProto valueType = 3;
    repeated LiteralNodeProto values = 4;
}

message PairProto {
    LiteralNodeProto first = 1;
    LiteralNodeProto second = 2;
}

message CapProto {
    geometry.PointProto center = 1;
    double radiusMeters = 2;
}

// TODO: Now we have richer support for representing areas, we can replace these with
// functions that return a multipolygon
message AreaProto {
    oneof area {
        CapProto cap = 1;
        features.FeatureIDProto id = 2;
        geometry.MultiPolygonProto multiPolygon = 3;
    }
}

message ModifiedFeaturesProto {
    repeated features.FeatureIDProto ids = 1;
}

message AppliedChangeProto {
    repeated features.FeatureIDProto original = 1;
    repeated features.FeatureIDProto modified = 2;
}

message NodeProto {
    oneof node {
        string symbol = 1;
        LiteralNodeProto literal = 2;
        CallNodeProto call = 3;
        LambdaNodeProto lambda_ = 4;
    }
    int32 Begin = 6;
    int32 End = 7;
}

message LiteralNodeProto {
    oneof value {
        bool nilValue = 1;
        bool boolValue = 2;
        string stringValue = 3;
        int64 intValue = 4;
        double floatValue = 5;
        CollectionProto collectionValue = 6;
        PairProto pairValue = 7;
        features.FeatureProto featureValue = 8;
        QueryProto queryValue = 9;
        features.FeatureIDProto featureIDValue = 10;
        geometry.PointProto pointValue = 11;
        geometry.PolylineProto pathValue = 12;
        geometry.MultiPolygonProto areaValue = 13;
        AppliedChangeProto appliedChangeValue = 14;
        bytes geoJSONValue = 15; // gzipped
        features.TagProto tagValue = 16;
    }
}

message CallNodeProto {
    NodeProto function = 1;
    repeated NodeProto args = 2;
}

message LambdaNodeProto {
    repeated string args = 1;
    NodeProto node = 2;
}

message KeyQueryProto {
    string key = 1;
}

message KeyValueQueryProto {
    string key = 1;
    string value = 2;
}

message TypeQueryProto {
    features.FeatureType type = 1;
    QueryProto query = 2;
}

message SpatialQueryProto {
    AreaProto area = 1;
}

message IntersectionQueryProto {
    repeated QueryProto queries = 1;
}

message UnionQueryProto {
    repeated QueryProto queries = 1;
}

message AllQueryProto {}

message QueryProto {
    oneof query {
        KeyQueryProto key = 1;
        KeyValueQueryProto keyValue = 2;
        SpatialQueryProto spatial = 3;
        TypeQueryProto type = 4;
        IntersectionQueryProto intersection = 5;
        UnionQueryProto union = 6;
        AllQueryProto all = 7;
    }
}

message FindFeatureByIDRequestProto {
    features.FeatureIDProto id = 1;
}

message FindFeatureByIDResponseProto {
    features.FeatureProto feature = 1;
}

message FindFeaturesRequestProto {
    QueryProto query = 1;
}

message FindFeaturesResponseProto {
    repeated features.FeatureProto features = 1;
}

message ModifyTagsRequestProto {
    features.FeatureIDProto id = 1;
    repeated features.TagProto tags = 2;
}

message ModifyTagsBatchRequestProto {
    repeated ModifyTagsRequestProto requests = 1;
}

message ModifyTagsBatchResponseProto {
}

message EvaluateRequestProto {
    NodeProto request = 1;
}

message EvaluateResponseProto {
    NodeProto result = 1;
}

service WorldService {
    rpc FindFeatureByID(FindFeatureByIDRequestProto) returns (FindFeatureByIDResponseProto);
    rpc FindFeatures(FindFeaturesRequestProto) returns (FindFeaturesResponseProto);

    rpc ModifyTags(ModifyTagsBatchRequestProto) returns (ModifyTagsBatchResponseProto);

    rpc Evaluate(EvaluateRequestProto) returns (EvaluateResponseProto);
}