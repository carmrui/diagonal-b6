syntax = "proto3";

package api;

import "geometry.proto";
import "features.proto";

option go_package = "diagonal.works/diagonal/proto";

message ValueProto {
    oneof value {
        string stringValue = 1;
        double floatValue = 2;
        int64 intValue = 3;
        CollectionValueProto collectionValue = 4;
        features.FeatureProto featureValue = 5;
        QueryProto queryValue = 6;
        features.FeatureIDProto featureIDValue = 7;
    }
}

message CollectionValueProto {
    repeated string keys = 1;
    repeated ValueProto values = 2;
}

message CapProto {
    geometry.PointProto center = 1;
    double radiusMeters = 2;
}

message AreaProto {
    oneof area {
        CapProto cap = 1;
    }
}

message InputProto {
    oneof input {
        ValueProto literal = 1;        
        uint32 node = 2;
    }
}

enum NodeType {
    Call = 0;
    MapValues = 1;
    MapKeyValues = 2;
    Join = 3;
}

message NodeProto {
    uint32 id = 1;
    NodeType type = 2;
    string operation = 3;
    repeated InputProto inputs = 4;
}

message GraphProto {
    repeated NodeProto nodes = 1;
}

message KeyQueryProto {
    string key = 1;
}

message KeyValueQueryProto {
    string key = 1;
    string value = 2;
}

message TypeQueryProto {
    features.FeatureType type = 1;
    QueryProto query = 2;
}

message SpatialQueryProto {
    AreaProto area = 1;
}

message IntersectionQueryProto {
    repeated QueryProto queries = 1;
}

message UnionQueryProto {
    repeated QueryProto queries = 1;
}

message AllQueryProto {}

message QueryProto {
    oneof query {
        KeyQueryProto key = 1;
        KeyValueQueryProto keyValue = 2;
        SpatialQueryProto spatial = 3;
        TypeQueryProto type = 4;
        IntersectionQueryProto intersection = 5;
        UnionQueryProto union = 6;
        AllQueryProto all = 7;
    }
}

message FindFeatureByIDRequestProto {
    features.FeatureIDProto id = 1;
}

message FindFeatureByIDResponseProto {
    features.FeatureProto feature = 1;
}

message FindFeaturesRequestProto {
    QueryProto query = 1;
}

message FindFeaturesResponseProto {
    repeated features.FeatureProto features = 1;
}

message ModifyTagsRequestProto {
    features.FeatureIDProto id = 1;
    repeated features.TagProto tags = 2;
}

message ModifyTagsBatchRequestProto {
    repeated ModifyTagsRequestProto requests = 1;
}

message ModifyTagsBatchResponseProto {
}

message RunGraphRequestProto {
    GraphProto graph = 1;
}

message RunGraphResponseProto {
    ValueProto result = 2;
}

message RunGraphWithProgressRequestProto {
    GraphProto graph = 1;
}

message RunGraphWithProgressResponseProto {
    string status = 1;
    ValueProto result = 2;
}

message RunGraphGeoJSONRequestProto {
    GraphProto graph = 1;
}

message RunGraphGeoJSONResponseProto {
    bytes gzjson = 1;
}

message SetTagFromGraphRequestProto {
    string key = 1;
    GraphProto graph = 2;
}

message SetTagFromGraphResponseProto {
}

service WorldService {
    rpc FindFeatureByID(FindFeatureByIDRequestProto) returns (FindFeatureByIDResponseProto);
    rpc FindFeatures(FindFeaturesRequestProto) returns (FindFeaturesResponseProto);

    rpc ModifyTags(ModifyTagsBatchRequestProto) returns (ModifyTagsBatchResponseProto);

    rpc RunGraph(RunGraphRequestProto) returns (RunGraphResponseProto);
    rpc RunGraphGeoJSON(RunGraphGeoJSONRequestProto) returns (RunGraphGeoJSONResponseProto);
    rpc RunGraphWithProgress(RunGraphWithProgressRequestProto) returns (stream RunGraphWithProgressResponseProto);
    rpc SetTagFromGraph(SetTagFromGraphRequestProto) returns (SetTagFromGraphResponseProto);
}