syntax = "proto3";

package api;

import "features.proto";

option go_package = "diagonal.works/diagonal/proto";

message ValueProto {
    oneof value {
        string stringValue = 1;
        ListValueProto listValue = 2;
        features.FeatureProto featureValue = 3;
    }
}

message ListValueProto {
    repeated ValueProto values = 1;
}

message InputProto {
    oneof input {
        ValueProto literal = 1;        
        uint32 node = 2;
    }
}

message NodeProto {
    uint32 id = 1;
    string operation = 2;
    repeated InputProto inputs = 3;
}

message GraphProto {
    repeated NodeProto nodes = 1;
}

message KeyQueryProto {
    string key = 1;
}

message KeyValueQueryProto {
    string key = 1;
    string value = 2;
}

message SpatialQueryProto {
    repeated uint64 cellIds = 1;
}

message IntersectionQueryProto {
    repeated QueryProto queries = 1;
}

message UnionQueryProto {
    repeated QueryProto queries = 1;
}

message QueryProto {
    oneof query {
        KeyQueryProto key = 1;
        KeyValueQueryProto keyValue = 2;
        SpatialQueryProto spatial = 3;
        IntersectionQueryProto intersection = 4;
        UnionQueryProto union = 5;
    }
}

message FindFeatureByIDRequestProto {
    features.FeatureIDProto id = 1;
}

message FindFeatureByIDResponseProto {
    features.FeatureProto feature = 1;
}

message FindFeaturesRequestProto {
    QueryProto query = 1;
}

message FindFeaturesResponseProto {
    repeated features.FeatureProto features = 1;
}

message ModifyTagsRequestProto {
    features.FeatureIDProto id = 1;
    repeated features.TagProto tags = 2;
}

message ModifyTagsBatchRequestProto {
    repeated ModifyTagsRequestProto requests = 1;
}

message ModifyTagsBatchResponseProto {
}

service WorldService {
    rpc FindFeatureByID(FindFeatureByIDRequestProto) returns (FindFeatureByIDResponseProto);
    rpc FindFeatures(FindFeaturesRequestProto) returns (FindFeaturesResponseProto);

    rpc ModifyTags(ModifyTagsBatchRequestProto) returns (ModifyTagsBatchResponseProto);
}